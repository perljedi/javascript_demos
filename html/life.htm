<html>
<head>
<title>Conway's Game of Life (Javascript/jQuery Deo)</title>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css" />
    <script src="http://code.jquery.com/jquery-1.8.2.js"></script>
    <script src="http://code.jquery.com/ui/1.9.1/jquery-ui.js"></script>
<!--	<link href='http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css' type='text/css' rel='stylesheet' />
    <script src='http://code.jquery.com/jquery-1.8.2.js' type='text/javascript'></script>
	<script src='http://code.jquery.com/ui/1.9.1/jquery-ui.js'>
    <script src='/themes/js/jquery.ui.core.js' type='text/javascript'></script>
    <script src='/themes/js/jquery.ui.widget.js' type='text/javascript'></script>
    <script src='/themes/js/jquery.ui.button.js' type='text/javascript'></script>
    <script src='/themes/js/jquery.ui.dialog.js' type='text/javascript'></script>
    <script src='/themes/js/jquery.ui.position.js' type='text/javascript'></script>
    <script src='/themes/js/jquery.ui.draggable.js' type='text/javascript'></script> -->
<style>
div.game
{
    position:absolute;
    top:53px;
    left:3px;
    z-index:0;
	padding:10px;
	margin:3px;
}
div.controlls
{
    position:absolute;
    top:3px;
    left:3px;
    z-index:0;
    height:50px;
	padding-left:5px;
	padding-right:5px;
}
div.board
{
    border:5px black solid;
    z-index:1;
    top:70px;
    left:20px;
    height:250px;
    width:325px;
    background-color:#fff;
}
div.b1
{
	border-color:red;
	background-color:red;
}
div.b2
{
    border-color:blue;
    background-color:blue;
}
div.block
{
    border-width: 2px;
    border-style: outset;
	min-width:21px;
	min-height:21px;
    width:21px;
    height:21px;
    -moz-border-radius: 5px;
}
span.block img {
	width:21px;
	width:21px;
	padding:0px;
	margin:0px;
}
</style>
<script language='javascript'>
function GameBoard(columns, rows, boardElement){
	this.width=columns;
	this.height=rows;
	this.element=boardElement;
	this.cells = new Array();
	this.grid = new Array();
	for(var c=0; c<this.width; c++){
		this.grid[c]=new Array();
		for(var r=0; r<this.height; r++){
			var cell = new Cell(c,r,this);
			this.grid[c][r]=cell;
			this.cells.push(cell);
		}
	}
}
GameBoard.prototype.resize = function(newWidth, newHeight){
	var oWidth  = this.width;
	var oHeight = this.height;
	var nCells=new Array();
	var nGrid=new Array();
    for(var c=0; c<newWidth; c++){
		nGrid[c]=new Array();
		for(var r=0; r<newHeight; r++){
			var cell = this.getCell(c,r);
			if(! cell){
				cell = new Cell(c,r,this);
				cell.draw();
			}
			nGrid[c][r]=cell;
			nCells.push(cell);
		}
		if(newHeight < this.height){
			for(var r=newHeight; r< this.height; r++){
				this.grid[c][r].element.remove();
			}
		}
	}
	if(newWidth<this.width){
		for(var c=newWidth; c<this.width; c++){
			for(var r=0; r<this.height; r++){
				this.grid[c][r].element.remove();
			}
		}
	}
	this.grid=nGrid;
	this.cells=nCells;
	this.width=newWidth;
	this.height=newHeight;
}
GameBoard.prototype.getCell = function(column, row){
	if(column >= 0 && column < this.width && row >=0 && row<this.height){
		return this.grid[column][row];
	}
	return;
}
GameBoard.prototype.draw = function(){
	for(var c=0; c<this.cells.length; c++){
		this.cells[c].draw();
	}
}
GameBoard.prototype.getCurrentState = function(){
	var state = new Array();
	for(var c=0; c<this.width; c++){
		state[c] = new Array();
		for(var r=0; r<this.height; r++){
			state[c][r]=this.getCell(c,r).countLiveNeighbors();
		}
	}
	return state;
}

function Cell(column, row, board){
	this.board=board;
	this.column=column;
	this.row=row;
    this.isAlive=false;
    if(column>1 && column<4 && row>1 && row<4){
        this.isAlive = true;//Math.random() > 0.5;
    }
	var tpos = (15+(this.row*25));
	var lpos = (15+(this.column*25));
	this.element=$("<div class='block' style='z-index:5;position:absolute;top:"+tpos+";left:"+lpos+"'></div>");
	this.element.data("column", this.column);
	this.element.data("row", this.row);
	board.element.append(this.element);
}
Cell.prototype.setLive = function(newState){
	this.isAlive=newState;
}
Cell.prototype.countLiveNeighbors = function(){
	var count=0;
	for(var c=-1; c<2; c++){
		for(var r=-1; r<2; r++){
			var neighbor=this.board.getCell(this.column-c, this.row-r);
			if(neighbor && neighbor.isAlive){
				count++;
			}
		}
	}
	return count;
}
Cell.prototype.getRow = function(){return this.row;}
Cell.prototype.getColumn = function(){return this.column;}
Cell.prototype.draw = function(){
	if(this.isAlive){
		this.element.removeClass("b2");
		this.element.addClass("b1");
		//$("#board").append("<span class='block b1' style='z-index:5;top:"+this.row*25+";left:"+this.column*50+"'></span>");
	}else{
		this.element.addClass("b2");
		this.element.removeClass("b1");
        //$("#board").append("<span class='block b2' style='z-index:5;top:"+this.row*25+";left:"+this.column*50+"'></span>");
	}
}

var bgjob=null;

var gameBoard;
jQuery('document').ready(function(){
	$("#cellWidth").spinner({min:4,max:200, change:setBoardSize});
	$("#cellHeight").spinner({min:4,max:200, change:setBoardSize});
	$("#gameSpeed").spinner({min:1, max:200});
	gameBoard = new GameBoard(10, 10, $("#board"));
	setBoardSize();
	gameBoard.draw();
	$("div.block").live("click", function(){
			var row=$(this).data("row");
			var column = $(this).data("column");
			var cell=gameBoard.getCell(column,row);
			if(cell.isAlive){
				cell.setLive(false);
			}else{
				cell.setLive(true);
			}
			cell.draw();
	});
	$("#step_button").click(runItteration);
	$("#run_button").click(function(){
		if(bgjob){
			clearInterval(bgjob);
			bgjob=null;
		}else{
			bgjob = setInterval(runItteration, 1000/$("#gameSpeed").spinner("value"));
		}
	});
});


function setBoardSize(){
	stopAnimation();
    var board=$("#board");
	gameBoard.resize($("#cellWidth").spinner("value"), $("#cellHeight").spinner("value"));
    board.width($("#cellWidth").spinner("value") * 25);
    board.height($("#cellHeight").spinner("value") * 25);
}

function stopAnimation(){
	if(bgjob){
		clearInterval(bgjob);
		bgjob=null;
	}
}

function runItteration(){
	var orig = gameBoard.getCell(0,0);
	var cState = gameBoard.getCurrentState();
	for(var i in gameBoard.cells){
		var cell=gameBoard.cells[i];
		if(cell.isAlive){
			if(cState[cell.column][cell.row] < 3 || cState[cell.column][cell.row] > 4){
				cell.isAlive=false;
			}
		}else{
			if(cState[cell.column][cell.row] == 3){
				cell.isAlive=true;
			}
		}
	}
	gameBoard.draw();
}
</script>
</head>
<body>
<body class='ui-widget'>
<div class='controlls ui-widget-content ui-corner-all'>
	<input type='text' id='cellWidth' name='cellWidth' value=10 size=4>
	x
	<input type='text' id='cellHeight' name='cellHeight' value=10 size=4>
    <button id="step_button" class="ui-button ui-button-text-only ui-widget ui-state-default ui-corner-all">
        <span class="ui-button-text">Step</span>
    </button>

	<label for='gameSpeed'>Speed</label>
	<input type='text' id='gameSpeed' name='gameSpeed' value=10 size=4>
	<button id='run_button' class="ui-button ui-button-text-only ui-widget ui-state-default ui-corner-all">
		<span class="ui-button-text">Run</span>
	</button>
</div>
<div class='game ui-widget-content ui-corner-all'>
<div id='board' class='board ui-corner-all'>
</div>
</div>
</body>
</html>
